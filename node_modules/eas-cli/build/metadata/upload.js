"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadMetadataAsync = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const events_1 = require("../analytics/events");
const log_1 = tslib_1.__importDefault(require("../log"));
const tasks_1 = require("./apple/tasks");
const config_1 = require("./config");
const context_1 = require("./context");
const errors_1 = require("./errors");
const telemetry_1 = require("./utils/telemetry");
/**
 * Sync a local store configuration with the stores.
 * Note, only App Store is supported at this time.
 */
async function uploadMetadataAsync(metadataCtx) {
    const filePath = path_1.default.resolve(metadataCtx.projectDir, metadataCtx.metadataPath);
    if (!(await fs_extra_1.default.pathExists(filePath))) {
        throw new errors_1.MetadataValidationError(`Store configuration file not found "${filePath}"`);
    }
    const { app, auth } = await (0, context_1.ensureMetadataAppStoreAuthenticatedAsync)(metadataCtx);
    const { unsubscribeTelemetry, executionId } = (0, telemetry_1.subscribeTelemetry)(events_1.MetadataEvent.APPLE_METADATA_UPLOAD, { app, auth });
    const fileData = await fs_extra_1.default.readJson(filePath);
    const { valid, errors: validationErrors } = (0, config_1.validateConfig)(fileData);
    if (!valid) {
        throw new errors_1.MetadataValidationError(`Store configuration errors found`, validationErrors);
    }
    log_1.default.addNewLineIfNone();
    log_1.default.log('Uploading App Store configuration...');
    const errors = [];
    const config = (0, config_1.createAppleReader)(fileData);
    const tasks = (0, tasks_1.createAppleTasks)(metadataCtx);
    const taskCtx = { app };
    for (const task of tasks) {
        try {
            await task.prepareAsync({ context: taskCtx });
        }
        catch (error) {
            errors.push(error);
        }
    }
    for (const task of tasks) {
        try {
            await task.uploadAsync({ config, context: taskCtx });
        }
        catch (error) {
            errors.push(error);
        }
    }
    unsubscribeTelemetry();
    if (errors.length > 0) {
        throw new errors_1.MetadataUploadError(errors, executionId);
    }
    return { appleLink: `https://appstoreconnect.apple.com/apps/${app.id}/appstore` };
}
exports.uploadMetadataAsync = uploadMetadataAsync;
