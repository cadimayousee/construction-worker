"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppleConfigWriter = void 0;
const apple_utils_1 = require("@expo/apple-utils");
/**
 * Serializes the Apple ASC entities into the metadata configuration schema.
 * This uses version 0 of the config schema.
 */
class AppleConfigWriter {
    constructor(schema = {}) {
        this.schema = schema;
    }
    /** Get the schema result to write it to the config file */
    toSchema() {
        return {
            configVersion: 0,
            apple: this.schema,
        };
    }
    setAgeRating(attributes) {
        this.schema.advisory = attributes;
    }
    setInfoLocale(attributes) {
        var _a, _b, _c;
        this.schema.info = (_a = this.schema.info) !== null && _a !== void 0 ? _a : {};
        const existing = (_b = this.schema.info[attributes.locale]) !== null && _b !== void 0 ? _b : {};
        this.schema.info[attributes.locale] = {
            ...existing,
            title: (_c = attributes.name) !== null && _c !== void 0 ? _c : 'no name provided',
            subtitle: optional(attributes.subtitle),
            privacyPolicyUrl: optional(attributes.privacyPolicyUrl),
            privacyPolicyText: optional(attributes.privacyPolicyText),
            privacyChoicesUrl: optional(attributes.privacyChoicesUrl),
        };
    }
    setCategories({ primaryCategory, secondaryCategory }) {
        this.schema.categories = [];
        // TODO: see why these types are conflicting
        if (primaryCategory) {
            this.schema.categories.push(primaryCategory.id);
            if (secondaryCategory) {
                this.schema.categories.push(secondaryCategory.id);
            }
        }
    }
    setVersion(attributes) {
        this.schema.copyright = optional(attributes.copyright);
    }
    setVersionRelease(attributes) {
        if (attributes.releaseType === apple_utils_1.ReleaseType.SCHEDULED) {
            this.schema.release = {
                autoReleaseDate: optional(attributes.earliestReleaseDate),
            };
        }
        if (attributes.releaseType === apple_utils_1.ReleaseType.AFTER_APPROVAL) {
            this.schema.release = {
                automaticRelease: true,
            };
        }
        if (attributes.releaseType === apple_utils_1.ReleaseType.MANUAL) {
            this.schema.release = {
                automaticRelease: false,
            };
        }
    }
    setVersionLocale(attributes) {
        var _a, _b, _c;
        this.schema.info = (_a = this.schema.info) !== null && _a !== void 0 ? _a : {};
        const existing = (_b = this.schema.info[attributes.locale]) !== null && _b !== void 0 ? _b : {};
        this.schema.info[attributes.locale] = {
            ...existing,
            description: optional(attributes.description),
            keywords: (_c = optional(attributes.keywords)) === null || _c === void 0 ? void 0 : _c.split(',').map(keyword => keyword.trim()),
            releaseNotes: optional(attributes.whatsNew),
            marketingUrl: optional(attributes.marketingUrl),
            promoText: optional(attributes.promotionalText),
            supportUrl: optional(attributes.supportUrl),
        };
    }
}
exports.AppleConfigWriter = AppleConfigWriter;
/** Helper function to convert `T | null` to `T | undefined`, required for the entity properties */
function optional(value) {
    return value !== null && value !== void 0 ? value : undefined;
}
